<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on ZA TAN</title><link>https://www.ganymedenil.com/tags/</link><description>Recent content in Tags on ZA TAN</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 28 Apr 2021 22:18:34 +0000</lastBuildDate><atom:link href="https://www.ganymedenil.com/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>go基础库之创建临时文件</title><link>https://www.ganymedenil.com/2019/06/05/go-standard-library-by-create-a-temporary-file.html</link><pubDate>Wed, 05 Jun 2019 19:13:20 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/05/go-standard-library-by-create-a-temporary-file.html</guid><description>&lt;p>临时文件通常在运行测试用例时使用，或者如果你的应用需要存储短期内容（如用户上传的临时数据）。&lt;/p></description></item><item><title>go基础库之从不完整的JSON数组中提取数据</title><link>https://www.ganymedenil.com/2019/06/04/go-standard-library-by-extract-data-from-an-incomplete-json-array.html</link><pubDate>Tue, 04 Jun 2019 20:10:04 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/04/go-standard-library-by-extract-data-from-an-incomplete-json-array.html</guid><description>&lt;p>本文将讲解一个实例，你的程序从不可靠的源中使用JSON，而JSON包含一个对象数组，这些对象具有开始标记&lt;code>[&lt;/code>但数组中的项目数非常大，并且JSON的结尾可能被破坏。&lt;/p></description></item><item><title>go基础库之有效地解析大型XML文件</title><link>https://www.ganymedenil.com/2019/06/04/go-standard-library-by-effectively-parse-large-xml-files.html</link><pubDate>Tue, 04 Jun 2019 19:22:12 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/04/go-standard-library-by-effectively-parse-large-xml-files.html</guid><description>&lt;p>XML是一种非常常见的数据交换格式。Go库包含对以与JSON相同的方式解析XML文件的支持。通常，使用与XML方案对应的结构，并且在此帮助下，一次解析XML内容。问题是当XML文件太大而无法容纳到内存中时，需要以块的形式解析文件。本文将展示如何处理大型XML文件并解析所需信息。&lt;/p></description></item><item><title>go基础库之将对象序列化为二进制格式</title><link>https://www.ganymedenil.com/2019/06/03/go-standard-library-by-serialize-objects-into-binary-format.html</link><pubDate>Mon, 03 Jun 2019 22:01:58 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/03/go-standard-library-by-serialize-objects-into-binary-format.html</guid><description>&lt;p>除了众所周知的JSON和XML之外，Go还提供二进制格式 &lt;code>gob&lt;/code>。本文将介绍如何使用&lt;code>gob&lt;/code>包。&lt;/p></description></item><item><title>go基础库之读写ZIP文件</title><link>https://www.ganymedenil.com/2019/06/03/go-standard-library-by-read-and-write-zip-files.html</link><pubDate>Mon, 03 Jun 2019 20:15:23 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/03/go-standard-library-by-read-and-write-zip-files.html</guid><description>&lt;p>ZIP压缩是一种广泛使用的压缩格式。通常使用场景是将文件集打包为ZIP格式，或者，将压缩文件解压缩。本文将展示如何使用标准库以编程方式处理ZIP文件。&lt;/p></description></item><item><title>go基础库之writer和reader之间的管道</title><link>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-pipe-between-writer-and-reader.html</link><pubDate>Sun, 02 Jun 2019 17:57:47 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-pipe-between-writer-and-reader.html</guid><description>&lt;p>进程之间的管道是使用第一个进程的输出作为其他进程的输入的简单方法。这可以在Go中执行相同的概念，例如，将数据从一个套接字传输到另一个套接字，以创建隧道连接。本文将向你展示如何使用Go内置库创建管道。&lt;/p></description></item><item><title>go基础库之一次写入多个writers</title><link>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-write-multiple-writers-at-once.html</link><pubDate>Sun, 02 Jun 2019 17:55:49 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-write-multiple-writers-at-once.html</guid><description>&lt;p>当您需要将相同的输出写入多个目标时，内置包中可以提供帮助。本文展示了如何同时实现多个目标的写入。&lt;/p></description></item><item><title>go基础库之读写二进制数据</title><link>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-read-and-write-binary-data.html</link><pubDate>Sun, 02 Jun 2019 17:54:16 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-read-and-write-binary-data.html</guid><description>&lt;p>本文讲解了如何以二进制形式编写和读取任何类型。&lt;/p></description></item><item><title>go基础库之在文件中寻找位置</title><link>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-find-the-location-in-the-file.html</link><pubDate>Sun, 02 Jun 2019 17:45:53 +0000</pubDate><guid>https://www.ganymedenil.com/2019/06/02/go-standard-library-by-find-the-location-in-the-file.html</guid><description>&lt;p>在某些情况下，需要从文件中的特定位置读取或写入，例如索引文件。本文将向你展示如何在平面文件操作上下文中使用位置搜索。&lt;/p></description></item><item><title>go基础库之读/写不同的字符集</title><link>https://www.ganymedenil.com/2019/05/31/go-standard-library-by-read-write-different-character-sets.html</link><pubDate>Fri, 31 May 2019 22:14:24 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/31/go-standard-library-by-read-write-different-character-sets.html</guid><description>&lt;p>不同的输入源可以使用不同的字符集，用Go开发的应用中也不例外。现在许多用户都使用的Windows系统，当然也有其他的系统。默认情况下，Go希望程序中使用的字符编码都为UTF-8。如果不是，则必须对给定的字符集进行解码，以便能够正确处理字符串。本文将介绍非UTF-8的字符集如何进行文件读写。&lt;/p></description></item><item><title>go基础库之从文件读入字符串</title><link>https://www.ganymedenil.com/2019/05/31/go-standard-library-by-read-string-from-file.html</link><pubDate>Fri, 31 May 2019 22:08:09 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/31/go-standard-library-by-read-string-from-file.html</guid><description>&lt;p>在前面的文章中，我们使用&lt;code>Stdin&lt;/code>来读数据还有如何读取文件中的内容。在本文中我们将把两者结合起来，给大家展示如何从文件读入字符串。&lt;/p></description></item><item><title>go基础库之按名称打开文件</title><link>https://www.ganymedenil.com/2019/05/30/go-standard-library-by-open-file-by-name.html</link><pubDate>Thu, 30 May 2019 21:29:55 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/30/go-standard-library-by-open-file-by-name.html</guid><description>&lt;p>存储或读取数据的文件访问是一种非常常见的操作。本文展示了如何使用标准库按名称和路径打开文件。&lt;/p></description></item><item><title>go基础库之读取标准输入</title><link>https://www.ganymedenil.com/2019/05/30/go-standard-library-by-read-standard-input.html</link><pubDate>Thu, 30 May 2019 20:22:34 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/30/go-standard-library-by-read-standard-input.html</guid><description>&lt;p>每个进程都拥有自己的标准输入、输出和错误文件描述符。&lt;code>stdin&lt;/code>作为进程的输入。本文将介绍如何从&lt;code>stdin&lt;/code>读取数据。&lt;/p></description></item><item><title>go基础库之编写标准输出和错误</title><link>https://www.ganymedenil.com/2019/05/29/go-standard-library-by-write-standard-output-and-errors.html</link><pubDate>Wed, 29 May 2019 20:15:33 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/29/go-standard-library-by-write-standard-output-and-errors.html</guid><description>&lt;p>每个进程都各有一个&lt;code>stdin&lt;/code>，&lt;code>stdout&lt;/code>和 &lt;code>stderr&lt;/code>文件描述符。使用的标准方法是&lt;code>stdout&lt;/code>作为进程输出，&lt;code>stderr&lt;/code>作为进程错误输出。由于这些是文件描述符，因此写入数据的目标可以是从控制台到套接字的任何内容。本文将告诉你如何编写&lt;code>stdout&lt;/code>和&lt;code>stderr&lt;/code>。&lt;/p></description></item><item><title>go基础库之将文本与tabwriter对齐</title><link>https://www.ganymedenil.com/2019/05/29/go-standard-library-by-align-text-with-tabwriter.html</link><pubDate>Wed, 29 May 2019 20:13:59 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/29/go-standard-library-by-align-text-with-tabwriter.html</guid><description>&lt;p>在某些情况下，输出(通常是数据输出)是通过选项卡文本完成的，该文本在排列良好的单元格中格式化。这种格式可以通过&lt;code>text/tabwriter&lt;/code>包来实现。该包提供了&lt;code>Writer&lt;/code>过滤器，它将带有制表符的文本转换为格式正确的输出。&lt;/p></description></item><item><title>go基础库之缩进文本文档</title><link>https://www.ganymedenil.com/2019/05/28/go-standard-library-by-indented-text-document.html</link><pubDate>Tue, 28 May 2019 20:44:29 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/28/go-standard-library-by-indented-text-document.html</guid><description>&lt;p>本文将指导你完成文本文档的缩进和取消注释 。&lt;/p></description></item><item><title>go基础库之管理字符串中的空格</title><link>https://www.ganymedenil.com/2019/05/28/go-standard-library-by-manage-spaces-in-strings.html</link><pubDate>Tue, 28 May 2019 20:39:42 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/28/go-standard-library-by-manage-spaces-in-strings.html</guid><description>&lt;p>字符串输入可能包含太多的空格，太少的空格或不适合的空格字符。此篇包含有关如何管理这些内容并根据需要格式化字符串的提示。&lt;/p></description></item><item><title>go基础库之解析以逗号分隔的数据</title><link>https://www.ganymedenil.com/2019/05/27/go-standard-library-by-parse-data-separated-by-commas.html</link><pubDate>Mon, 27 May 2019 21:02:28 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/27/go-standard-library-by-parse-data-separated-by-commas.html</guid><description>&lt;p>有多种表格数据格式。&lt;strong>CSV&lt;/strong>（&lt;strong>逗号分隔值&lt;/strong>）是主要用于数据传输和导出的最基本格式之一。没有定义CSV的标准，但RFC 4180中描述了格式本身。&lt;/p></description></item><item><title>go基础库之文本样式转换</title><link>https://www.ganymedenil.com/2019/05/27/go-standard-library-by-text-style-conversion.html</link><pubDate>Mon, 27 May 2019 21:00:34 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/27/go-standard-library-by-text-style-conversion.html</guid><description>&lt;p>在很多实际工作中，文本样式转换是最常用的方法，比如大小写转换，首字母大写，蛇形命名法，驼峰命名法等。&lt;/p></description></item><item><title>go基础库之解码非Unicode字符集中的字符串</title><link>https://www.ganymedenil.com/2019/05/26/go-standard-library-by-decode-strings-in-non-unicode-character-sets.html</link><pubDate>Sun, 26 May 2019 14:55:42 +0000</pubDate><guid>https://www.ganymedenil.com/2019/05/26/go-standard-library-by-decode-strings-in-non-unicode-character-sets.html</guid><description>&lt;p>一个鲜为人知的事实是&lt;code>.go&lt;/code>文件中的所有内容都是用UTF-8编码的。信不信由你，Unicode不是世界上唯一的字符集。例如，Windows-1250编码在Windows用户中广泛使用。&lt;/p>
&lt;p>在处理非Unicode字符串时，需要将内容转换为Unicode。本篇将演示如何解码和编码非unicode字符串。&lt;/p></description></item></channel></rss>